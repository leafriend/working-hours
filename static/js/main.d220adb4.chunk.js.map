{"version":3,"sources":["log/types.ts","lib.ts","DailyLog.tsx","Article.tsx","Header.tsx","storage/local.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LeaveType","zerofill","i","concat","toString","convertTimeToMinutes","time","sign","charAt","_abs$split$map","substring","split","map","str","parseInt","_abs$split$map2","Object","slicedToArray","convertMinutesToTime","minutes","abs","Math","hours","floor","rest","Log","log","balanceHolder","classCallCheck","this","date","leaveType","startedAt","finishedAt","createClass","key","get","_this","undefined","total","WORK","working","basetime","HALF","overtime","balance","toSource","source","DailyLog","props","Date","weekday","getDay","isHoliday","holidays","indexOf","isSunday","isSaturday","isToday","toISOString","disabled","readOnly","FULL","handleChange","partial","objectSpread","onLogChange","react_default","a","createElement","className","join","replace","trim","getDate","value","onChange","e","target","type","Article","logs","DailyLog_DailyLog","onLogsChange","Header","yearMonth","LOCAL_STORAGE_KEY","YEAR_MONTH","HOLIDAYS","logsSet","LocalLogsSet","hash","json","localStorage","getItem","setItem","JSON","parse","entries","forEach","_ref","_ref2","sources","_yearMonth$split$map","_yearMonth$split$map2","lastDate","year","month","lastDateOf","Array","fill","setLogSources","stringify","convertLogSourcesToLogs","length","refined","App","getLogSources","defaultLogs","_useState","useState","_useState2","setLogs","Header_Header","Article_Article","newLogs","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d220adb4.chunk.js","sourcesContent":["import { convertMinutesToTime, convertTimeToMinutes, Nullable } from \"../lib\";\n\nexport enum LeaveType {\n  WORK = 'WORK',\n  FULL = 'FULL',\n  HALF = 'HALF',\n}\n\nexport interface LogSource {\n  readonly date: string;\n  readonly leaveType: LeaveType;\n  readonly startedAt?: string;\n  readonly finishedAt?: string;\n}\n\nexport interface BalanceHolder {\n  readonly balance: string\n}\n\nexport class Log {\n\n  public readonly date: string;\n\n  public readonly leaveType: LeaveType;\n\n  public readonly startedAt?: string;\n\n  public readonly finishedAt?: string;\n\n  public constructor(\n    log: LogSource,\n    private readonly balanceHolder: BalanceHolder,\n  ) {\n    this.date = log.date;\n    this.leaveType = log.leaveType;\n    this.startedAt = log.startedAt;\n    this.finishedAt = log.finishedAt;\n  }\n\n  public get working(): string | undefined {\n    if (this.startedAt === undefined || this.finishedAt === undefined) {\n      return undefined;\n    }\n\n    const startedAt = convertTimeToMinutes(this.startedAt);\n    const finishedAt = convertTimeToMinutes(this.finishedAt);\n    const total = finishedAt - startedAt;\n\n    const working = (() => {\n      if (this.leaveType !== LeaveType.WORK && total < (4.5 * 1) * 60) {\n        return total - (30 * (1 - 1));\n\n      } else if (this.leaveType !== LeaveType.WORK && total < (4.5 * 2) * 60) {\n        return total - (30 * (2 - 1));\n\n      } else if (total < (4.5 * 3) * 60) {\n        return total - (30 * (3 - 1));\n\n      } else {\n        return total - 90;\n      }\n    })()\n\n    return convertMinutesToTime(working);\n  }\n\n  public get overtime(): string | undefined {\n    const working = this.working;\n    if (working === undefined) {\n      return undefined;\n    }\n\n    const basetime = this.leaveType === LeaveType.HALF ? 4 : 8;\n    const overMinutes = convertTimeToMinutes(working) - (basetime * 60);\n    return convertMinutesToTime(overMinutes);\n  }\n\n  public get balance(): string {\n    const overtime = this.overtime;\n    if (overtime === undefined) {\n      return this.balanceHolder.balance;\n    }\n\n    const balanceMinutes = convertTimeToMinutes(this.balanceHolder.balance);\n    const overtimeMinutes = convertTimeToMinutes(overtime);\n\n    return convertMinutesToTime(balanceMinutes + overtimeMinutes);\n  }\n\n}\n\nexport function toSource(source: Nullable<LogSource>): Nullable<LogSource> {\n  if (source === null) {\n    return null;\n  }\n  const { date, leaveType, startedAt, finishedAt } = source;\n  if (leaveType === LeaveType.WORK && startedAt === undefined && finishedAt === undefined) {\n    return null\n  }\n  return { date, leaveType, startedAt, finishedAt };\n}\n","export type Nullable<T> = T | null;\n\nexport function lastDateOf(year: number, month: number): number {\n  return new Date(year, month, 0).getDate();\n}\n\nexport function zerofill(i: number): string {\n  if (i < 10) {\n    return `0${i}`;\n  } else {\n    return i.toString();\n  }\n}\n\nexport function convertTimeToMinutes(time: string): number {\n  const sign = time.charAt(0) === '-' ? -1 : 1;\n  const abs = sign < 0 ? time.substring(1) : time;\n  const [hours, minutes] = abs.split(':').map(str => parseInt(str, 10));\n  return sign * (hours * 60 + minutes);\n}\n\nexport function convertMinutesToTime(minutes: number): string {\n  const sign = minutes < 0 ? '-' : ''\n  const abs = Math.abs(minutes);\n  const hours = Math.floor(abs / 60);\n  const rest = abs - (hours * 60);\n  return `${sign}${zerofill(hours)}:${zerofill(rest)}`;\n}\n","import React from 'react';\n\nimport { Log, LeaveType, LogSource } from './log/types';\n\nexport interface DailyLogProps {\n  holidays: string[];\n  log: Log;\n  onLogChange: (source: LogSource) => void,\n}\n\ntype LeaveTypeLog = Pick<Log, 'leaveType'>;\ntype StartedAtLog = Pick<Log, 'startedAt'>;\ntype FinishedAtLog = Pick<Log, 'finishedAt'>;\ntype PartialLog = LeaveTypeLog | StartedAtLog | FinishedAtLog;\n\nconst SATURDAY = 6;\nconst SUNDAY = 0;\n\nexport const DailyLog: React.FC<DailyLogProps> = props => {\n  const log = props.log\n\n  const date = new Date(log.date);\n  const weekday = date.getDay();\n\n  const isHoliday = props.holidays.indexOf(log.date) >= 0;\n  const isSunday = weekday === SUNDAY;\n  const isSaturday = weekday === SATURDAY;\n  const isToday = new Date().toISOString().substring(0, 10) === log.date;\n\n  const disabled = isHoliday || isSunday || isSaturday;\n  const readOnly = log.leaveType === LeaveType.FULL;\n\n  function handleChange(partial: PartialLog) {\n    const source = {\n      ...log,\n      ...partial,\n    };\n\n    props.onLogChange(source);\n  }\n\n  return (\n    <tr className={[\n      isHoliday ? 'holiday' : (\n        isSunday ? 'saturday' : (\n          isSaturday ? 'sunday' : ''\n        )\n      ),\n      isToday ? 'today' : '',\n    ].join(' ').replace(/ +/g, ' ').trim()}>\n      <td className=\"date\">{date.getDate()}</td>\n      <td>\n        <select\n          disabled={disabled}\n          value={log.leaveType}\n          onChange={e => handleChange({ leaveType: e.target.value as LeaveType })}\n        >\n          <option value={LeaveType.WORK}>Work</option>\n          <option value={LeaveType.FULL}>Full</option>\n          <option value={LeaveType.HALF}>Half</option>\n        </select>\n      </td>\n      <td className=\"time\">\n        <input\n          disabled={disabled}\n          readOnly={disabled ? false : readOnly}\n          type=\"time\"\n          value={log.startedAt || ''}\n          onChange={e => handleChange({ startedAt: e.target.value || undefined })}\n        />\n      </td>\n      <td className=\"time\">\n        <input\n          disabled={disabled}\n          readOnly={disabled ? false : (readOnly || log.startedAt === '')}\n          type=\"time\"\n          value={log.finishedAt || ''}\n          onChange={e => handleChange({ finishedAt: e.target.value || undefined })}\n        />\n      </td>\n      <td className=\"time\">{log.working || '--:--'}</td>\n      <td className=\"time\">{log.balance}</td>\n    </tr>\n  );\n\n}\n","import React from 'react';\n\nimport './Article.scss';\nimport { DailyLog } from './DailyLog';\nimport { Log, LogSource } from './log/types';\n\nexport interface ArticlaProps {\n  holidays: string[];\n  yearMonth: string;\n  logs: Log[];\n  onLogsChange: (i: number, source: LogSource) => void,\n}\n\nexport const Article: React.FC<ArticlaProps> = props => {\n\n  const logs = props.logs.map((log, i) => (\n    <DailyLog\n      key={i}\n      holidays={props.holidays}\n      log={log}\n      onLogChange={source => props.onLogsChange(i, source)}\n    />\n  ));\n\n  return (\n    <article>\n      <table>\n        <thead>\n          <tr>\n            <th className=\"date\">Date</th>\n            <th>Leave</th>\n            <th className=\"time\">Started</th>\n            <th className=\"time\">Finished</th>\n            <th className=\"time\">Working</th>\n            <th className=\"time\">Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n          {logs}\n        </tbody>\n      </table>\n    </article>\n  );\n};\n","import React from 'react';\n\nexport interface HeaderProps {\n  yearMonth: string;\n}\n\nexport const Header: React.FC<HeaderProps> = props => {\n  return (\n    <header>HCWH: {props.yearMonth}</header>\n  );\n};\n","import { lastDateOf, Nullable, zerofill } from \"../lib\";\nimport { LogSource, toSource } from \"../log/types\";\n\nimport { LogsSet } from \"./types\";\n\ninterface Hash {\n  [yearMonth: string]: Nullable<LogSource>[];\n}\n\nconst LOCAL_STORAGE_KEY = 'logsSet';\n\nexport class LocalLogsSet implements LogsSet {\n\n  private readonly hash: Hash = {}\n\n  public constructor() {\n    const json = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (json === null) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, '{}');\n    } else {\n      this.hash = JSON.parse(json);\n    }\n\n    // TODO Temporary code: previous version format doesn't contain date\n    // -> fill date\n    Object.entries(this.hash).forEach(([key,sources]) => {\n      this.hash[key] = sources.map((source, i) => {\n        if (source && !source.date) {\n          return {\n            date: `${key}-${zerofill(i + 1)}`,\n            ...source,\n          }\n        } else {\n          return source;\n        }\n      });\n    })\n  }\n\n  public getLogSources(yearMonth: string): Nullable<LogSource>[] {\n    if (yearMonth in this.hash) {\n      return this.hash[yearMonth];\n    }\n\n    const [year, month] = yearMonth.split('-').map(str => parseInt(str));\n    const lastDate = lastDateOf(year, month);\n\n    const sources = Array<Nullable<LogSource>>(lastDate).fill(null);\n    this.setLogSources(yearMonth, sources);\n    return sources;\n  }\n\n  public setLogSources(yearMonth: string, sources: Nullable<LogSource>[]): void {\n    this.hash[yearMonth] = sources.map(toSource);\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.hash));\n  }\n\n}\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport { Article } from './Article';\nimport { Header } from './Header';\nimport { Nullable, zerofill } from './lib';\nimport { Log, LogSource, toSource, BalanceHolder, LeaveType } from './log/types';\nimport { LocalLogsSet } from './storage/local';\nimport { LogsSet } from './storage/types';\n\nconst YEAR_MONTH = '2019-05';\nconst HOLIDAYS = [\n  '2019-05-01',\n  '2019-05-06',\n];\n\nconst logsSet: LogsSet = new LocalLogsSet();\n\nfunction convertLogSourcesToLogs(yearMonth: string, sources: Nullable<LogSource>[]): Log[] {\n  let balanceHolder: BalanceHolder = {\n    balance: '00:00',\n  };\n  const logs = Array(sources.length);\n  sources.forEach((source, i) => {\n    const refined = source ? source : {\n      date: `${yearMonth}-${zerofill(i + 1)}`,\n      leaveType: LeaveType.WORK,\n    };\n    const log = new Log(refined, balanceHolder);\n    logs[i] = log;\n    balanceHolder = log;\n  })\n  return logs;\n}\n\nconst App: React.FC = () => {\n  const sources = logsSet.getLogSources(YEAR_MONTH);\n  const defaultLogs = convertLogSourcesToLogs(YEAR_MONTH, sources);\n  const [logs, setLogs] = useState(defaultLogs);\n\n  function handleLogsChange(i: number, source: LogSource) {\n    const sources = logs.map(toSource);\n    sources[i] = source;\n    const newLogs = convertLogSourcesToLogs(YEAR_MONTH, sources);\n    setLogs(newLogs);\n    logsSet.setLogSources(YEAR_MONTH, newLogs);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n        yearMonth={YEAR_MONTH}\n      />\n      <Article\n        yearMonth={YEAR_MONTH}\n        holidays={HOLIDAYS}\n        logs={logs}\n        onLogsChange={handleLogsChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}