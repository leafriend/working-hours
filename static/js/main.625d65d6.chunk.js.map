{"version":3,"sources":["log/types.ts","lib.ts","DailyLog.tsx","Article.tsx","Header.tsx","storage/local.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LeaveType","zerofill","i","concat","toString","convertTimeToMinutes","time","sign","charAt","_abs$split$map","substring","split","map","str","parseInt","_abs$split$map2","Object","slicedToArray","convertMinutesToTime","minutes","abs","Math","hours","floor","rest","DailyLog","props","weekday","date","getDay","disabled","readOnly","log","leaveType","FULL","handleChange","partial","objectSpread","working","startedAt","finishedAt","total","onLogChange","react_default","a","createElement","getDate","value","onChange","e","target","WORK","HALF","type","undefined","balance","Article","_props$yearMonth$spli","yearMonth","_props$yearMonth$spli2","year","month","logs","DailyLog_DailyLog","key","Date","slice","onLogsChange","Header","LOCAL_STORAGE_KEY","logsSet","LocalLogsSet","classCallCheck","this","hash","json","localStorage","getItem","setItem","JSON","parse","createClass","_yearMonth$split$map","_yearMonth$split$map2","lastDate","lastDateOf","Array","fill","setLogs","stringify","App","_useState","useState","_useState2","_useState3","getLogs","_useState4","className","Header_Header","Article_Article","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.625d65d6.chunk.js","sourcesContent":["export enum LeaveType {\n  WORK = 'WORK',\n  FULL = 'FULL',\n  HALF = 'HALF',\n}\n\nexport interface LeaveLog {\n  leaveType: LeaveType;\n  startedAt?: string;\n  finishedAt?: string;\n  working?: string;\n  balance: string;\n}\n\nexport interface StartedLog {\n  leaveType: LeaveType;\n  startedAt: string;\n  finishedAt?: string;\n  working?: string;\n  balance: string;\n}\n\nexport interface FinishedLog {\n  leaveType: LeaveType;\n  startedAt: string;\n  finishedAt: string;\n  working: string;\n  balance: string;\n}\n\nexport type Log = LeaveLog | StartedLog | FinishedLog;\n","export function lastDateOf(year: number, month: number): number {\n  return new Date(year, month, 0).getDate();\n}\n\nexport function zerofill(i: number): string {\n  if (i < 10) {\n    return `0${i}`;\n  } else {\n    return i.toString();\n  }\n}\n\nexport function convertTimeToMinutes(time: string): number {\n  const sign = time.charAt(0) === '-' ? -1 : 1;\n  const abs = sign < 0 ? time.substring(1) : time;\n  const [hours, minutes] = abs.split(':').map(str => parseInt(str, 10));\n  return sign * (hours * 60 + minutes);\n}\n\nexport function convertMinutesToTime(minutes: number): string {\n  const sign = minutes < 0 ? '-' : ''\n  const abs = Math.abs(minutes);\n  const hours = Math.floor(abs / 60);\n  const rest = abs - (hours * 60);\n  return `${sign}${zerofill(hours)}:${zerofill(rest)}`;\n}\n","import React from 'react';\n\nimport { Log, LeaveType } from './log/types';\nimport { convertMinutesToTime, convertTimeToMinutes } from './lib';\n\nexport interface DailyLogProps {\n  date: Date;\n  log: Log;\n  onLogChange: (log: Log) => void,\n}\n\ntype LeaveTypeLog = Pick<Log, 'leaveType'>;\ntype StartedAtLog = Pick<Log, 'startedAt'>;\ntype FinishedAtLog = Pick<Log, 'finishedAt'>;\ntype PartialLog = LeaveTypeLog | StartedAtLog | FinishedAtLog;\n\nconst SATURDAY = 6;\nconst SUNDAY = 0;\n\nexport const DailyLog: React.FC<DailyLogProps> = props => {\n\n  const weekday = props.date.getDay();\n  const disabled = weekday === SATURDAY || weekday === SUNDAY;\n  const readOnly = props.log.leaveType === LeaveType.FULL;\n\n  function handleChange(partial: PartialLog) {\n    const log = {\n      ...props.log,\n      ...partial,\n    };\n\n    const working = (() => {\n      if (log.startedAt && log.finishedAt) {\n        const startedAt = convertTimeToMinutes(log.startedAt);\n        const finishedAt = convertTimeToMinutes(log.finishedAt);\n        const total = finishedAt - startedAt;\n\n        const working\n          = (total >= (8 + 1 + 4 + 0.5) * 60)\n            ? (total - 90)\n            : total - 60\n          ;\n        return convertMinutesToTime(working);\n      } else {\n        return undefined;\n      }\n    })();\n\n    props.onLogChange({ ...log, working });\n  }\n\n  return (\n    <tr>\n      <td>{props.date.getDate()}</td>\n      <td>\n        <select\n          disabled={disabled}\n          value={props.log.leaveType}\n          onChange={e => handleChange({ leaveType: e.target.value as LeaveType })}\n        >\n          <option value={LeaveType.WORK}>Work</option>\n          <option value={LeaveType.FULL}>Full</option>\n          <option value={LeaveType.HALF}>Half</option>\n        </select>\n      </td>\n      <td>\n        <input\n          disabled={disabled}\n          readOnly={disabled ? false : readOnly}\n          type=\"time\"\n          value={props.log.startedAt || ''}\n          onChange={e => handleChange({ startedAt: e.target.value || undefined })}\n        />\n      </td>\n      <td>\n        <input\n          disabled={disabled}\n          readOnly={disabled ? false : (readOnly || props.log.startedAt === '')}\n          type=\"time\"\n          value={props.log.finishedAt || ''}\n          onChange={e => handleChange({ finishedAt: e.target.value || undefined })}\n        />\n      </td>\n      <td>{props.log.working || '--:--'}</td>\n      <td>{props.log.balance}</td>\n    </tr>\n  );\n\n}\n","import React from 'react';\n\nimport './Article.scss';\nimport { Log } from './log/types';\nimport { DailyLog } from './DailyLog';\nimport { convertTimeToMinutes, convertMinutesToTime } from './lib';\n\nexport interface ArticlaProps {\n  yearMonth: string;\n  logs: Log[];\n  onLogsChange: (logs: Log[]) => void,\n}\n\nexport const Article: React.FC<ArticlaProps> = props => {\n  const [year, month] = props.yearMonth.split('-').map(str => parseInt(str, 10));\n\n  const logs = props.logs.map((log, i) => {\n    const date = i + 1;\n\n    function handleLogChange(log: Log) {\n      const logs = props.logs.slice();\n      logs[i] = log;\n      let balance = 0;\n      props.onLogsChange(logs.map(log => {\n        if (log.working) {\n          const working = convertTimeToMinutes(log.working) - (8 * 60);\n          balance += working;\n        }\n        return {\n          ...log,\n          balance: convertMinutesToTime(balance),\n        };\n      }));\n    }\n\n    return (\n      <DailyLog\n        key={i}\n        date={new Date(year, month - 1, date)}\n        log={log}\n        onLogChange={handleLogChange}\n      />\n    );\n  });\n\n  return (\n    <article>\n      <table>\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Leave</th>\n            <th>Started</th>\n            <th>Finished</th>\n            <th>Working</th>\n            <th>Balance</th>\n          </tr>\n        </thead>\n        <tbody>\n          {logs}\n        </tbody>\n      </table>\n    </article>\n  );\n};\n","import React from 'react';\n\nexport interface HeaderProps {\n  yearMonth: string;\n}\n\nexport const Header: React.FC<HeaderProps> = props => {\n  return (\n    <header>HCWH: {props.yearMonth}</header>\n  );\n};\n","import { lastDateOf } from \"../lib\";\nimport { Log, LeaveType } from \"../log/types\";\n\nimport { LogsSet } from \"./types\";\n\ninterface Hash {\n  [yearMonth: string]: Log[];\n}\n\nconst LOCAL_STORAGE_KEY = 'logsSet';\n\nexport class LocalLogsSet implements LogsSet {\n\n  private readonly hash: Hash = {}\n\n  public constructor() {\n    const json = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (json === null) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, '{}');\n    } else {\n      this.hash = JSON.parse(json);\n    }\n  }\n\n  public getLogs(yearMonth: string): Log[] {\n    if (yearMonth in this.hash) {\n      return this.hash[yearMonth];\n    }\n\n    const [year, month] = yearMonth.split('-').map(str => parseInt(str));\n    const lastDate = lastDateOf(year, month);\n\n    const logs = Array<Log>(lastDate).fill({\n      leaveType: LeaveType.WORK,\n      startedAt: undefined,\n      finishedAt: undefined,\n      working: undefined,\n      balance: '00:00',\n    });\n    this.setLogs(yearMonth, logs);\n    return logs;\n  }\n\n  public setLogs(yearMonth: string, logs: Log[]): void {\n    this.hash[yearMonth] = logs;\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.hash));\n  }\n\n}\n","import React, { useState } from 'react';\n\nimport './App.css';\nimport { Article } from './Article';\nimport { Header } from './Header';\nimport { Log } from './log/types';\nimport { LocalLogsSet } from './storage/local';\nimport { LogsSet } from './storage/types';\n\nconst YEAR_MONTH = '2019-05';\n\nconst logsSet: LogsSet = new LocalLogsSet();\n\nconst App: React.FC = () => {\n  const [yearMonth, setYearMonth] = useState(YEAR_MONTH);\n  const [logs, setLogs] = useState(logsSet.getLogs(yearMonth));\n\n  function handleLogsChange(logs: Log[]) {\n    setLogs(logs);\n    logsSet.setLogs(yearMonth, logs);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n        yearMonth={YEAR_MONTH}\n      />\n      <Article\n        yearMonth={yearMonth}\n        logs={logs}\n        onLogsChange={handleLogsChange}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}