{"version":3,"sources":["DailyLog.tsx","MonthlyLog.tsx","Header.tsx","log/types.ts","lib.ts","JsonView.tsx","Footer.tsx","LogEditor.tsx","storage/local.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["DailyLog","props","react_default","a","createElement","id","concat","log","date","className","isHoliday","isSunday","isSaturday","isActive","join","replace","trim","onClick","onActivate","Date","getDate","leaveType","startedAt","finishedAt","working","overall","target","balance","MonthlyLog","useEffect","console","logs","forEach","map","key","Header","yearMonth","LeaveType","zerofill","i","toString","convertTimeToMinutes","time","sign","charAt","_abs$split$map","substring","split","str","parseInt","_abs$split$map2","Object","slicedToArray","convertMinutesToTime","minutes","abs","Math","hours","floor","rest","SATURDAY","SUNDAY","Log","balanceHolder","classCallCheck","this","weekday","getDay","createClass","get","FULL","undefined","_this","total","HALF","WORK","overtime","toSource","source","JsonView","sources","value","JSON","stringify","onChange","e","onLogsChange","parse","TABLE","name","TEXT","Footer","viewMode","handleViewModeChange","href","rel","LogEditor","disabled","readOnly","handleChange","partial","objectSpread","onLogChange","type","LOCAL_STORAGE_KEY","LocalLogsSet","hash","json","localStorage","getItem","setItem","entries","_ref","_ref2","_yearMonth$split$map","_yearMonth$split$map2","lastDate","year","month","lastDateOf","Array","fill","setLogSources","YEAR_MONTH","HOLIDAYS","NOW","TODAY","getFullYear","getMonth","BALANCE_HOLDER","logsSet","convertLogSourcesToLogs","holidays","activeDate","length","refined","indexOf","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","_useState","useState","_useState2","setLogs","getLogSources","_useState3","_useState4","activeLog","setActiveLog","_useState5","_useState6","setViewMode","_useState7","_useState8","initialized","setInitialized","handleActivate","container","document","getElementById","el","scrollTo","top","offsetTop","find","handleLogsChange","newLogs","activeLogs","filter","Header_Header","MonthlyLog_MonthlyLog","JsonView_JsonView","LogEditor_LogEditor","Footer_Footer","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.10fa22e6.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\n\nimport { Log } from './log/types';\n\nexport interface DailyLogProps {\n  log: Log;\n  onActivate: (activeDate: string) => void,\n}\n\nexport default function DailyLog(props: DailyLogProps): ReactElement {\n  return (\n    <tr\n      id={`log-${props.log.date}`}\n      className={[\n        props.log.isHoliday ? 'holiday' : (\n          props.log.isSunday ? 'sunday' : (\n            props.log.isSaturday ? 'saturday' : ''\n          )\n        ),\n        props.log.isActive ? 'active' : '',\n      ].join(' ').replace(/ +/g, ' ').trim()}\n      onClick={() => props.onActivate(props.log.date)}\n    >\n      <td className=\"date\">{new Date(props.log.date).getDate()}</td>\n      <td>{props.log.leaveType}</td>\n      <td className=\"time\">{props.log.startedAt || ''}</td>\n      <td className=\"time\">{props.log.finishedAt || ''}</td>\n      <td className=\"time\">{props.log.working || ''}</td>\n      <td className=\"time\">{props.log.overall}</td>\n      <td className=\"time\">{props.log.target}</td>\n      <td className=\"time\">{props.log.balance}</td>\n    </tr>\n  );\n}\n","import React, { ReactElement, useEffect } from 'react';\n\nimport './MonthlyLog.scss';\nimport DailyLog from './DailyLog';\nimport { Log } from './log/types';\n\nexport interface MonthlyLogProps {\n  logs: Log[];\n  onActivate: (activeDate: string) => void,\n}\n\nexport default function MonthlyLog(props: MonthlyLogProps): ReactElement {\n  useEffect(() => {\n    console.log('MonthlyLog: logs', props.logs);\n    props.logs.forEach(log => {\n      if (log.isActive) {\n        props.onActivate(log.date);\n      }\n    })\n  });\n  return (\n    <table className=\"monthly-logs\">\n      <thead>\n        <tr>\n          <th className=\"date\">D.</th>\n          <th>Leave</th>\n          <th className=\"time\">Start</th>\n          <th className=\"time\">Fin.</th>\n          <th className=\"time\">Work</th>\n          <th className=\"time\">All</th>\n          <th className=\"time\">Target</th>\n          <th className=\"time\">Bal.</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.logs.map(log => (\n          <DailyLog\n            key={log.date}\n            log={log}\n            onActivate={props.onActivate}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React, { ReactElement } from 'react';\n\nimport './Header.scss';\n\nexport interface HeaderProps {\n  yearMonth: string;\n}\n\nexport default function Header(props: HeaderProps): ReactElement {\n  return (\n    <header>Working Hours of {props.yearMonth}</header>\n  );\n};\n","import { convertMinutesToTime, convertTimeToMinutes, Nullable } from \"../lib\";\n\nexport enum LeaveType {\n  WORK = 'WORK',\n  HALF = 'HALF',\n  FULL = 'FULL',\n}\n\nexport interface LogSource {\n  readonly date: string;\n  readonly leaveType: LeaveType;\n  readonly startedAt?: string;\n  readonly finishedAt?: string;\n}\n\nexport interface BalanceHolder {\n  readonly overall: string;\n  readonly target: string;\n  readonly balance: string\n}\n\nconst SATURDAY = 6;\nconst SUNDAY = 0;\n\nexport class Log {\n\n  public readonly date: string;\n\n  public readonly leaveType: LeaveType;\n\n  public readonly startedAt?: string;\n\n  public readonly finishedAt?: string;\n\n  public readonly isSaturday: boolean;\n\n  public readonly isSunday: boolean;\n\n  public constructor(\n    log: LogSource,\n    private readonly balanceHolder: BalanceHolder,\n    public readonly isHoliday: boolean,\n    public isActive: boolean,\n  ) {\n    this.date = log.date;\n    this.leaveType = log.leaveType;\n    this.startedAt = log.startedAt;\n    this.finishedAt = log.finishedAt;\n\n    const date = new Date(log.date);\n    const weekday = date.getDay();\n\n    this.isSunday = weekday === SUNDAY;\n    this.isSaturday = weekday === SATURDAY;\n\n  }\n\n  public get overall(): string {\n\n    if (this.leaveType !== LeaveType.FULL && (this.startedAt === undefined || this.finishedAt === undefined)) {\n      return this.balanceHolder.overall;\n    }\n\n    const overall = convertTimeToMinutes(this.balanceHolder.overall);\n    const working = convertTimeToMinutes(this.working!);\n    return convertMinutesToTime(overall + working);\n\n  }\n\n  public get target(): string {\n\n    if (this.isHoliday || this.isSaturday || this.isSunday) {\n      return this.balanceHolder.target;\n    }\n\n    const target = convertTimeToMinutes(this.balanceHolder.target);\n    return convertMinutesToTime(target + 8 * 60);\n\n  }\n\n  public get working(): string | undefined {\n    if (this.leaveType === LeaveType.FULL) {\n      return convertMinutesToTime(9.5 * 60);\n    }\n\n    if (this.startedAt === undefined || this.finishedAt === undefined) {\n      return undefined;\n    }\n\n    const startedAt = convertTimeToMinutes(this.startedAt);\n    const finishedAt = convertTimeToMinutes(this.finishedAt);\n    const total = finishedAt - startedAt;\n\n    const working = (() => {\n      switch (this.leaveType) {\n\n        case LeaveType.HALF:\n          if (total >= 4 * 60) {\n            return 8 * 60;\n          }\n          return 4 * 60 + total;\n\n        case LeaveType.WORK:\n          if (total < (4.5 * 1) * 60) {\n            return total - (30 * (1 - 1));\n\n          } else if (total < (4.5 * 2) * 60) {\n            return total - (30 * (2 - 1));\n\n          } else if (total < (4.5 * 3) * 60) {\n            return total - (30 * (3 - 1));\n\n          } else {\n            return total - 90;\n          }\n      }\n\n    })()\n\n    return convertMinutesToTime(working);\n  }\n\n  public get overtime(): string | undefined {\n    const working = this.working;\n    if (working === undefined) {\n      return undefined;\n    }\n\n    const overMinutes = convertTimeToMinutes(working) - (8 * 60);\n    return convertMinutesToTime(overMinutes);\n  }\n\n  public get balance(): string {\n    const overtime = this.overtime;\n    if (overtime === undefined) {\n      return this.balanceHolder.balance;\n    }\n\n    const balanceMinutes = convertTimeToMinutes(this.balanceHolder.balance);\n    const overtimeMinutes = convertTimeToMinutes(overtime);\n\n    return convertMinutesToTime(balanceMinutes + overtimeMinutes);\n  }\n\n}\n\nexport function toSource(source: Nullable<LogSource>): Nullable<LogSource> {\n  if (source === null) {\n    return null;\n  }\n  const { date, leaveType, startedAt, finishedAt } = source;\n  if (leaveType === LeaveType.WORK && startedAt === undefined && finishedAt === undefined) {\n    return null\n  }\n  return { date, leaveType, startedAt, finishedAt };\n}\n","export type Nullable<T> = T | null;\n\nexport function lastDateOf(year: number, month: number): number {\n  return new Date(year, month, 0).getDate();\n}\n\nexport function zerofill(i: number): string {\n  if (i < 10) {\n    return `0${i}`;\n  } else {\n    return i.toString();\n  }\n}\n\nexport function convertTimeToMinutes(time: string): number {\n  const sign = time.charAt(0) === '-' ? -1 : 1;\n  const abs = sign < 0 ? time.substring(1) : time;\n  const [hours, minutes] = abs.split(':').map(str => parseInt(str, 10));\n  return sign * (hours * 60 + minutes);\n}\n\nexport function convertMinutesToTime(minutes: number): string {\n  const sign = minutes < 0 ? '-' : ''\n  const abs = Math.abs(minutes);\n  const hours = Math.floor(abs / 60);\n  const rest = abs - (hours * 60);\n  return `${sign}${zerofill(hours)}:${zerofill(rest)}`;\n}\n","import React, { ReactElement } from 'react';\n\nimport './JsonView.scss';\nimport { Log, LogSource, toSource } from './log/types';\nimport { Nullable } from './lib';\n\nexport interface JsonViewProps {\n  logs: Log[];\n  onLogsChange: (sources: Nullable<LogSource>[]) => void,\n}\n\nexport default function JsonView(props: JsonViewProps): ReactElement {\n  const sources = props.logs.map(toSource);\n  return (\n    <textarea\n      className=\"json-view\"\n      value={JSON.stringify(sources)}\n      onChange={e => props.onLogsChange(JSON.parse(e.target.value))}\n    />\n  );\n};\n","import React, { ReactElement } from 'react';\n\nimport './Footer.scss';\nimport MonthlyLog from './MonthlyLog';\nimport JsonView from './JsonView';\n\nconst TABLE = MonthlyLog.name;\nconst TEXT = JsonView.name;\n\nexport interface FooterProps {\n  viewMode: string;\n  handleViewModeChange: (viewMode: string) => void\n}\n\nexport default function Footer(props: FooterProps): ReactElement {\n  return (\n    <footer>\n      <select\n        value={props.viewMode}\n        onChange={e => props.handleViewModeChange(e.target.value)}\n      >\n        <option value={TABLE}>Table</option>\n        <option value={TEXT}>Text</option>\n      </select>\n      <a\n        href=\"https://github.com/leafriend/working-hours/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >Github</a>\n    </footer>\n  );\n};\n","import React, { ReactElement } from 'react';\n\nimport './LogEditor.scss';\n\nimport { Log, LeaveType, LogSource } from './log/types';\n\nexport interface LogEditorProps {\n  log: Log;\n  onLogChange: (source: LogSource) => void,\n}\n\ntype LeaveTypeLog = Pick<Log, 'leaveType'>;\ntype StartedAtLog = Pick<Log, 'startedAt'>;\ntype FinishedAtLog = Pick<Log, 'finishedAt'>;\ntype PartialLog = LeaveTypeLog | StartedAtLog | FinishedAtLog;\n\nexport default function LogEditor(props: LogEditorProps): ReactElement {\n  const log = props.log\n\n  const disabled = log.isHoliday || log.isSunday || log.isSaturday;\n  const readOnly = log.leaveType === LeaveType.FULL;\n\n  function handleChange(partial: PartialLog) {\n    const source = {\n      ...log,\n      ...partial,\n    };\n\n    props.onLogChange(source);\n  }\n\n  return (\n    <div className=\"LogEditor\">\n      <h2>{log.date}</h2>\n      <div className=\"form-group\">\n        <label>\n          Leave Type:\n          <select\n            disabled={disabled}\n            value={log.leaveType}\n            onChange={e => handleChange({ leaveType: e.target.value as LeaveType })}\n          >\n            <option value={LeaveType.WORK}>Work</option>\n            <option value={LeaveType.HALF}>Half</option>\n            <option value={LeaveType.FULL}>Full</option>\n          </select>\n        </label>\n        <label>\n          Started:\n          <input\n            disabled={disabled}\n            readOnly={disabled ? false : readOnly}\n            type=\"time\"\n            value={log.startedAt || ''}\n            onChange={e => handleChange({ startedAt: e.target.value || undefined })}\n          />\n        </label>\n        <label>\n          Finished:\n          <input\n            disabled={disabled}\n            readOnly={disabled ? false : (readOnly || log.startedAt === '')}\n            type=\"time\"\n            value={log.finishedAt || ''}\n            onChange={e => handleChange({ finishedAt: e.target.value || undefined })}\n          />\n        </label>\n      </div>\n    </div>\n  );\n\n}\n","import { lastDateOf, Nullable, zerofill } from \"../lib\";\nimport { LogSource, toSource } from \"../log/types\";\n\nimport { LogsSet } from \"./types\";\n\ninterface Hash {\n  [yearMonth: string]: Nullable<LogSource>[];\n}\n\nconst LOCAL_STORAGE_KEY = 'logsSet';\n\nexport class LocalLogsSet implements LogsSet {\n\n  private readonly hash: Hash = {}\n\n  public constructor() {\n    const json = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (json === null) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, '{}');\n    } else {\n      this.hash = JSON.parse(json);\n    }\n\n    // TODO Temporary code: previous version format doesn't contain date\n    // -> fill date\n    Object.entries(this.hash).forEach(([key,sources]) => {\n      this.hash[key] = sources.map((source, i) => {\n        if (source && !source.date) {\n          return {\n            date: `${key}-${zerofill(i + 1)}`,\n            ...source,\n          }\n        } else {\n          return source;\n        }\n      });\n    })\n  }\n\n  public getLogSources(yearMonth: string): Nullable<LogSource>[] {\n    if (yearMonth in this.hash) {\n      return this.hash[yearMonth];\n    }\n\n    const [year, month] = yearMonth.split('-').map(str => parseInt(str));\n    const lastDate = lastDateOf(year, month);\n\n    const sources = Array<Nullable<LogSource>>(lastDate).fill(null);\n    this.setLogSources(yearMonth, sources);\n    return sources;\n  }\n\n  public setLogSources(yearMonth: string, sources: Nullable<LogSource>[]): void {\n    this.hash[yearMonth] = sources.map(toSource);\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.hash));\n  }\n\n}\n","import React, { ReactElement, useState, useEffect } from 'react';\n\nimport './App.scss';\nimport MonthlyLog from './MonthlyLog';\nimport Header from './Header';\nimport JsonView from './JsonView';\nimport Footer from './Footer';\nimport LogEditor from './LogEditor';\nimport { Nullable, zerofill } from './lib';\nimport { Log, LogSource, toSource, BalanceHolder, LeaveType } from './log/types';\nimport { LocalLogsSet } from './storage/local';\nimport { LogsSet } from './storage/types';\n\nconst YEAR_MONTH = '2019-05';\nconst HOLIDAYS = [\n  '2019-05-01',\n  '2019-05-06',\n];\n\nconst NOW = new Date();\nconst TODAY = `${NOW.getFullYear()}-${zerofill(NOW.getMonth() + 1)}-${zerofill(NOW.getDate())}`;\n\nconst BALANCE_HOLDER: BalanceHolder = {\n  overall: '00:00',\n  target: '00:00',\n  balance: '00:00',\n};\n\nconst TABLE = MonthlyLog.name;\nconst TEXT = JsonView.name;\n\nconst logsSet: LogsSet = new LocalLogsSet();\n\nfunction convertLogSourcesToLogs(yearMonth: string, sources: Nullable<LogSource>[], holidays: string[], activeDate: string): Log[] {\n  let balanceHolder: BalanceHolder = BALANCE_HOLDER;\n  const logs = Array(sources.length);\n  sources.forEach((source, i) => {\n    const refined = source ? source : {\n      date: `${yearMonth}-${zerofill(i + 1)}`,\n      leaveType: LeaveType.WORK,\n    };\n\n    const isHoliday = holidays.indexOf(refined.date) >= 0;\n\n    const isActive = activeDate === refined.date;\n\n    const log = new Log(refined, balanceHolder, isHoliday, isActive);\n    logs[i] = log;\n    balanceHolder = log;\n  })\n  return logs;\n}\nfunction loadLogs(yearMonth: string, holidays: string[], activeDate: string): Log[] {\n  const sources = logsSet.getLogSources(yearMonth);\n  const defaultLogs = convertLogSourcesToLogs(yearMonth, sources, holidays, activeDate);\n  return defaultLogs;\n}\n\nexport default function App(): ReactElement {\n  const [logs, setLogs] = useState<Log[]>([]);\n  useEffect(() => {\n    setLogs(loadLogs(YEAR_MONTH, HOLIDAYS, TODAY));\n  }, []);\n\n  const [activeLog, setActiveLog] = useState<Log>(\n    new Log({ date: TODAY, leaveType: LeaveType.WORK }, BALANCE_HOLDER, false, true)\n  );\n\n  const [viewMode, setViewMode] = useState(TABLE);\n\n  const [initialized, setInitialized] = useState(false);\n  function handleActivate(activeDate: string): void {\n    logs.forEach(log => log.isActive = log.date === activeDate);\n    setLogs(logs);\n\n    if (!initialized) {\n      const container = document.getElementById(`content-container`);\n      const el = document.getElementById(`log-${activeDate}`);\n      if (container && el) {\n        setInitialized(true);\n        container.scrollTo({ top: el.offsetTop });\n      }\n    }\n\n    const activeLog = logs.find(log => log.isActive);\n    activeLog && setActiveLog(activeLog);\n  }\n\n  function handleLogsChange(sources: Nullable<LogSource>[]) {\n    const newLogs = convertLogSourcesToLogs(YEAR_MONTH, sources, HOLIDAYS, activeLog.date);\n    setLogs(newLogs);\n    const activeLogs = logs.filter(log => log.isActive);\n    if (activeLogs.length > 0) {\n      setActiveLog(activeLogs[0]);\n    }\n    logsSet.setLogSources(YEAR_MONTH, newLogs);\n  }\n\n  function handleLogChange(source: LogSource) {\n    const date = parseInt(source.date.substring(8), 10);\n    const sources = logs.map(toSource)\n      .map((log, i) =>\n        log === null\n          ? (i + 1 === date ? source : log)\n          : (log.date === source.date ? source : log)\n      );\n    const newLogs = convertLogSourcesToLogs(YEAR_MONTH, sources, HOLIDAYS, source.date);\n    setLogs(newLogs);\n    const activeLogs = newLogs.filter(log => log.isActive);\n    if (activeLogs.length > 0) {\n      setActiveLog(activeLogs[0]);\n    }\n    logsSet.setLogSources(YEAR_MONTH, newLogs);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n        yearMonth={YEAR_MONTH}\n      />\n      <article>\n        <div id=\"content-container\">\n          {(() => {\n            switch (viewMode) {\n              case TABLE:\n                return (\n                  <MonthlyLog\n                    logs={logs}\n                    onActivate={handleActivate}\n                  />\n                );\n              case TEXT:\n                return (\n                  <JsonView\n                    logs={logs}\n                    onLogsChange={handleLogsChange}\n                  />\n                );\n              default:\n                return null;\n            }\n\n          })()}\n        </div>\n        <div>\n          <LogEditor\n            log={activeLog}\n            onLogChange={handleLogChange}\n          />\n        </div>\n      </article>\n      <Footer\n        viewMode={viewMode}\n        handleViewModeChange={viewMode => setViewMode(viewMode)}\n      />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}