{"version":3,"sources":["log/types.ts","lib.ts","DailyLog.tsx","MonthlyLog.tsx","Header.tsx","JsonView.tsx","Footer.tsx","storage/local.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["LeaveType","zerofill","i","concat","toString","convertTimeToMinutes","time","sign","charAt","_abs$split$map","substring","split","map","str","parseInt","_abs$split$map2","Object","slicedToArray","convertMinutesToTime","minutes","abs","Math","hours","floor","rest","Log","log","balanceHolder","classCallCheck","this","date","leaveType","startedAt","finishedAt","createClass","key","get","_this","FULL","undefined","total","HALF","WORK","working","basetime","overtime","balance","toSource","source","DailyLog","props","Date","weekday","getDay","isHoliday","holidays","indexOf","isSunday","isSaturday","now","isToday","getFullYear","getMonth","getDate","disabled","readOnly","handleChange","partial","objectSpread","onLogChange","react_default","a","createElement","className","join","replace","trim","value","onChange","e","target","type","MonthlyLog","logs","DailyLog_DailyLog","onLogsChange","Header","yearMonth","JsonView","sources","JSON","stringify","parse","TABLE","TEXT","Footer","viewMode","handleViewModeChange","href","rel","LOCAL_STORAGE_KEY","LocalLogsSet","hash","json","localStorage","getItem","setItem","entries","forEach","_ref","_ref2","_yearMonth$split$map","_yearMonth$split$map2","lastDate","year","month","lastDateOf","Array","fill","setLogSources","YEAR_MONTH","HOLIDAYS","logsSet","convertLogSourcesToLogs","length","refined","App","getLogSources","defaultLogs","_useState","useState","_useState2","setLogs","_useState3","_useState4","setViewMode","handleLogsChange","newLogs","Header_Header","MonthlyLog_MonthlyLog","JsonView_JsonView","Footer_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.d909cdc3.chunk.js","sourcesContent":["import { convertMinutesToTime, convertTimeToMinutes, Nullable } from \"../lib\";\n\nexport enum LeaveType {\n  WORK = 'WORK',\n  HALF = 'HALF',\n  FULL = 'FULL',\n}\n\nexport interface LogSource {\n  readonly date: string;\n  readonly leaveType: LeaveType;\n  readonly startedAt?: string;\n  readonly finishedAt?: string;\n}\n\nexport interface BalanceHolder {\n  readonly balance: string\n}\n\nexport class Log {\n\n  public readonly date: string;\n\n  public readonly leaveType: LeaveType;\n\n  public readonly startedAt?: string;\n\n  public readonly finishedAt?: string;\n\n  public constructor(\n    log: LogSource,\n    private readonly balanceHolder: BalanceHolder,\n  ) {\n    this.date = log.date;\n    this.leaveType = log.leaveType;\n    this.startedAt = log.startedAt;\n    this.finishedAt = log.finishedAt;\n  }\n\n  public get working(): string | undefined {\n    if (this.leaveType === LeaveType.FULL) {\n      return convertMinutesToTime(9.5 * 60);\n    }\n\n    if (this.startedAt === undefined || this.finishedAt === undefined) {\n      return undefined;\n    }\n\n    const startedAt = convertTimeToMinutes(this.startedAt);\n    const finishedAt = convertTimeToMinutes(this.finishedAt);\n    const total = finishedAt - startedAt;\n\n    const working = (() => {\n      switch (this.leaveType) {\n\n        case LeaveType.HALF:\n          if (total >= 4 * 60) {\n            return 8 * 60;\n          }\n          return 4 * 60 + total;\n\n        case LeaveType.WORK:\n          if (total < (4.5 * 1) * 60) {\n            return total - (30 * (1 - 1));\n\n          } else if (total < (4.5 * 2) * 60) {\n            return total - (30 * (2 - 1));\n\n          } else if (total < (4.5 * 3) * 60) {\n            return total - (30 * (3 - 1));\n\n          } else {\n            return total - 90;\n          }\n      }\n\n    })()\n\n    return convertMinutesToTime(working);\n  }\n\n  public get overtime(): string | undefined {\n    const working = this.working;\n    if (working === undefined) {\n      return undefined;\n    }\n\n    const basetime = this.leaveType === LeaveType.HALF ? 4 : 8;\n    const overMinutes = convertTimeToMinutes(working) - (basetime * 60);\n    return convertMinutesToTime(overMinutes);\n  }\n\n  public get balance(): string {\n    const overtime = this.overtime;\n    if (overtime === undefined) {\n      return this.balanceHolder.balance;\n    }\n\n    const balanceMinutes = convertTimeToMinutes(this.balanceHolder.balance);\n    const overtimeMinutes = convertTimeToMinutes(overtime);\n\n    return convertMinutesToTime(balanceMinutes + overtimeMinutes);\n  }\n\n}\n\nexport function toSource(source: Nullable<LogSource>): Nullable<LogSource> {\n  if (source === null) {\n    return null;\n  }\n  const { date, leaveType, startedAt, finishedAt } = source;\n  if (leaveType === LeaveType.WORK && startedAt === undefined && finishedAt === undefined) {\n    return null\n  }\n  return { date, leaveType, startedAt, finishedAt };\n}\n","export type Nullable<T> = T | null;\n\nexport function lastDateOf(year: number, month: number): number {\n  return new Date(year, month, 0).getDate();\n}\n\nexport function zerofill(i: number): string {\n  if (i < 10) {\n    return `0${i}`;\n  } else {\n    return i.toString();\n  }\n}\n\nexport function convertTimeToMinutes(time: string): number {\n  const sign = time.charAt(0) === '-' ? -1 : 1;\n  const abs = sign < 0 ? time.substring(1) : time;\n  const [hours, minutes] = abs.split(':').map(str => parseInt(str, 10));\n  return sign * (hours * 60 + minutes);\n}\n\nexport function convertMinutesToTime(minutes: number): string {\n  const sign = minutes < 0 ? '-' : ''\n  const abs = Math.abs(minutes);\n  const hours = Math.floor(abs / 60);\n  const rest = abs - (hours * 60);\n  return `${sign}${zerofill(hours)}:${zerofill(rest)}`;\n}\n","import React from 'react';\n\nimport { Log, LeaveType, LogSource } from './log/types';\nimport { zerofill } from './lib';\n\nexport interface DailyLogProps {\n  holidays: string[];\n  log: Log;\n  onLogChange: (source: LogSource) => void,\n}\n\ntype LeaveTypeLog = Pick<Log, 'leaveType'>;\ntype StartedAtLog = Pick<Log, 'startedAt'>;\ntype FinishedAtLog = Pick<Log, 'finishedAt'>;\ntype PartialLog = LeaveTypeLog | StartedAtLog | FinishedAtLog;\n\nconst SATURDAY = 6;\nconst SUNDAY = 0;\n\nexport const DailyLog: React.FC<DailyLogProps> = props => {\n  const log = props.log\n\n  const date = new Date(log.date);\n  const weekday = date.getDay();\n\n  const isHoliday = props.holidays.indexOf(log.date) >= 0;\n  const isSunday = weekday === SUNDAY;\n  const isSaturday = weekday === SATURDAY;\n\n  const now = new Date();\n  const today = `${now.getFullYear()}-${zerofill(now.getMonth() + 1)}-${zerofill(now.getDate())}`\n  const isToday = today === log.date;\n\n  const disabled = isHoliday || isSunday || isSaturday;\n  const readOnly = log.leaveType === LeaveType.FULL;\n\n  function handleChange(partial: PartialLog) {\n    const source = {\n      ...log,\n      ...partial,\n    };\n\n    props.onLogChange(source);\n  }\n\n  return (\n    <tr className={[\n      isHoliday ? 'holiday' : (\n        isSunday ? 'sunday' : (\n          isSaturday ? 'saturday' : ''\n        )\n      ),\n      isToday ? 'today' : '',\n    ].join(' ').replace(/ +/g, ' ').trim()}>\n      <td className=\"date\">{date.getDate()}</td>\n      <td>\n        <select\n          disabled={disabled}\n          value={log.leaveType}\n          onChange={e => handleChange({ leaveType: e.target.value as LeaveType })}\n        >\n          <option value={LeaveType.WORK}>Work</option>\n          <option value={LeaveType.HALF}>Half</option>\n          <option value={LeaveType.FULL}>Full</option>\n        </select>\n      </td>\n      <td className=\"time\">\n        <input\n          disabled={disabled}\n          readOnly={disabled ? false : readOnly}\n          type=\"time\"\n          value={log.startedAt || ''}\n          onChange={e => handleChange({ startedAt: e.target.value || undefined })}\n        />\n      </td>\n      <td className=\"time\">\n        <input\n          disabled={disabled}\n          readOnly={disabled ? false : (readOnly || log.startedAt === '')}\n          type=\"time\"\n          value={log.finishedAt || ''}\n          onChange={e => handleChange({ finishedAt: e.target.value || undefined })}\n        />\n      </td>\n      <td className=\"time\">{log.working || '--:--'}</td>\n      <td className=\"time\">{log.balance}</td>\n    </tr>\n  );\n\n}\n","import React from 'react';\n\nimport './MonthlyLog.scss';\nimport { DailyLog } from './DailyLog';\nimport { Log, LogSource } from './log/types';\n\nexport interface ArticlaProps {\n  holidays: string[];\n  yearMonth: string;\n  logs: Log[];\n  onLogsChange: (source: LogSource) => void,\n}\n\nexport const MonthlyLog: React.FC<ArticlaProps> = props => {\n  return (\n    <table className=\"monthly-logs\">\n      <thead>\n        <tr>\n          <th className=\"date\">D.</th>\n          <th>Leave</th>\n          <th className=\"time\">Started</th>\n          <th className=\"time\">Finished</th>\n          <th className=\"time\">Work</th>\n          <th className=\"time\">Bal.</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.logs.map(log => (\n          <DailyLog\n            key={log.date}\n            holidays={props.holidays}\n            log={log}\n            onLogChange={source => props.onLogsChange(source)}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nMonthlyLog.toString = () => 'MonthlyLog';\n","import React from 'react';\n\nimport './Header.scss';\n\nexport interface HeaderProps {\n  yearMonth: string;\n}\n\nexport const Header: React.FC<HeaderProps> = props => {\n  return (\n    <header>Working Hours of {props.yearMonth}</header>\n  );\n};\n","import React from 'react';\n\nimport './JsonView.scss';\nimport { Log, LogSource, toSource } from './log/types';\nimport { Nullable } from './lib';\n\nexport interface JsonViewProps {\n  logs: Log[];\n  onLogsChange: (sources: Nullable<LogSource>[]) => void,\n}\n\nexport const JsonView: React.FC<JsonViewProps> = props => {\n  const sources = props.logs.map(toSource);\n  return (\n    <textarea\n      className=\"json-view\"\n      value={JSON.stringify(sources)}\n      onChange={e => props.onLogsChange(JSON.parse(e.target.value))}\n    />\n  );\n};\n\nJsonView.toString = () => 'JsonView';\n","import React from 'react';\n\nimport './Footer.scss';\nimport { MonthlyLog } from './MonthlyLog';\nimport { JsonView } from './JsonView';\n\nconst TABLE = MonthlyLog.toString();\nconst TEXT = JsonView.toString();\n\nexport interface FooterProps {\n  viewMode: string;\n  handleViewModeChange: (viewMode: string) => void\n}\n\nexport const Footer: React.FC<FooterProps> = props => {\n  return (\n    <footer>\n      <select\n        value={props.viewMode}\n        onChange={e => props.handleViewModeChange(e.target.value)}\n      >\n        <option value={TABLE}>Table</option>\n        <option value={TEXT}>Text</option>\n      </select>\n      |\n      <a\n        href=\"https://github.com/leafriend/working-hours/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >Github</a>\n    </footer>\n  );\n};\n","import { lastDateOf, Nullable, zerofill } from \"../lib\";\nimport { LogSource, toSource } from \"../log/types\";\n\nimport { LogsSet } from \"./types\";\n\ninterface Hash {\n  [yearMonth: string]: Nullable<LogSource>[];\n}\n\nconst LOCAL_STORAGE_KEY = 'logsSet';\n\nexport class LocalLogsSet implements LogsSet {\n\n  private readonly hash: Hash = {}\n\n  public constructor() {\n    const json = localStorage.getItem(LOCAL_STORAGE_KEY);\n    if (json === null) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, '{}');\n    } else {\n      this.hash = JSON.parse(json);\n    }\n\n    // TODO Temporary code: previous version format doesn't contain date\n    // -> fill date\n    Object.entries(this.hash).forEach(([key,sources]) => {\n      this.hash[key] = sources.map((source, i) => {\n        if (source && !source.date) {\n          return {\n            date: `${key}-${zerofill(i + 1)}`,\n            ...source,\n          }\n        } else {\n          return source;\n        }\n      });\n    })\n  }\n\n  public getLogSources(yearMonth: string): Nullable<LogSource>[] {\n    if (yearMonth in this.hash) {\n      return this.hash[yearMonth];\n    }\n\n    const [year, month] = yearMonth.split('-').map(str => parseInt(str));\n    const lastDate = lastDateOf(year, month);\n\n    const sources = Array<Nullable<LogSource>>(lastDate).fill(null);\n    this.setLogSources(yearMonth, sources);\n    return sources;\n  }\n\n  public setLogSources(yearMonth: string, sources: Nullable<LogSource>[]): void {\n    this.hash[yearMonth] = sources.map(toSource);\n\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(this.hash));\n  }\n\n}\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport { MonthlyLog } from './MonthlyLog';\nimport { Header } from './Header';\nimport { JsonView } from './JsonView';\nimport { Footer } from './Footer';\nimport { Nullable, zerofill } from './lib';\nimport { Log, LogSource, toSource, BalanceHolder, LeaveType } from './log/types';\nimport { LocalLogsSet } from './storage/local';\nimport { LogsSet } from './storage/types';\n\nconst YEAR_MONTH = '2019-05';\nconst HOLIDAYS = [\n  '2019-05-01',\n  '2019-05-06',\n];\n\nconst TABLE = MonthlyLog.toString();\nconst TEXT = JsonView.toString();\n\nconst logsSet: LogsSet = new LocalLogsSet();\n\nfunction convertLogSourcesToLogs(yearMonth: string, sources: Nullable<LogSource>[]): Log[] {\n  let balanceHolder: BalanceHolder = {\n    balance: '00:00',\n  };\n  const logs = Array(sources.length);\n  sources.forEach((source, i) => {\n    const refined = source ? source : {\n      date: `${yearMonth}-${zerofill(i + 1)}`,\n      leaveType: LeaveType.WORK,\n    };\n    const log = new Log(refined, balanceHolder);\n    logs[i] = log;\n    balanceHolder = log;\n  })\n  return logs;\n}\n\nconst App: React.FC = () => {\n  const sources = logsSet.getLogSources(YEAR_MONTH);\n  const defaultLogs = convertLogSourcesToLogs(YEAR_MONTH, sources);\n  const [logs, setLogs] = useState(defaultLogs);\n\n  const [viewMode, setViewMode] = useState(TABLE);\n\n  function handleLogsChange(source: LogSource) {\n    const date = parseInt(source.date.substring(8), 10);\n    const sources = logs.map(toSource)\n      .map((log, i) =>\n        log === null\n          ? (i + 1 === date ? source : log)\n          : (log.date === source.date ? source : log)\n      );\n    const newLogs = convertLogSourcesToLogs(YEAR_MONTH, sources);\n    setLogs(newLogs);\n    logsSet.setLogSources(YEAR_MONTH, newLogs);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header\n        yearMonth={YEAR_MONTH}\n      />\n      <article>\n        {(() => {\n          switch (viewMode) {\n            case TABLE:\n              return (\n                <MonthlyLog\n                  yearMonth={YEAR_MONTH}\n                  holidays={HOLIDAYS}\n                  logs={logs}\n                  onLogsChange={handleLogsChange}\n                />\n              );\n            case TEXT:\n              return (\n                <JsonView\n                  logs={logs}\n                  onLogsChange={sources => {\n                    const newLogs = convertLogSourcesToLogs(YEAR_MONTH, sources);\n                    setLogs(newLogs);\n                    logsSet.setLogSources(YEAR_MONTH, newLogs);\n                  }}\n                />\n              );\n            default:\n              return null;\n          }\n\n        })()}\n      </article>\n      <Footer\n        viewMode={viewMode}\n        handleViewModeChange={viewMode => setViewMode(viewMode)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}